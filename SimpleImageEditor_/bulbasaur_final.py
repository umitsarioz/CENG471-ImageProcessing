# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'image_editor_with_slider.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
import os
import numpy as np
import cv2 as cv
from PyQt5.QtWidgets import QFileDialog

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        # --- GUI Tasarımı --- #

        # Tasarım iconlarının bulunduğu dosya yolları
        dir = os.getcwd()
        image_path_bos = dir + '/icons/bos.jpg'
        app_logo_path = dir + '/icons/tools.png'
        add_file_path = dir + '/icons/add_file.png'
        crop_path = dir + '/icons/crop.png'
        auto_enhancement_path = dir + '/icons/magic-wand.png'
        blur_path = dir + '/icons/blur.png'
        brightness_path = dir + '/icons/brightness.png'
        contrast_path = dir + '/icons/contrast.png'
        rgb_path = dir + '/icons/rgb.png'
        flip_path = dir + '/icons/flip.png'
        save_path = dir + '/icons/save.png'
        rotate_path = dir + '/icons/rotation.png'
        cancel_path = dir + '/icons/delete.png'
        apply_path = dir + '/icons/ok-mark.png'
        clear_path = dir + '/icons/eraser.png'

        MainWindow.setObjectName("MainWindow")
        MainWindow.setWindowModality(QtCore.Qt.NonModal)
        MainWindow.setEnabled(True)
        MainWindow.resize(970, 762)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(968, 762))
        MainWindow.setMaximumSize(QtCore.QSize(970, 762))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(app_logo_path), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setAutoFillBackground(False)
        MainWindow.setStyleSheet("\n"
"background-color: rgb(94, 188, 139);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 20, 51, 691))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.basicOperations = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.basicOperations.setContentsMargins(0, 0, 0, 0)
        self.basicOperations.setObjectName("basicOperations")
        self.addImage = QtWidgets.QToolButton(self.verticalLayoutWidget)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(add_file_path), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.addImage.setIcon(icon1)
        self.addImage.setIconSize(QtCore.QSize(36, 48))
        self.addImage.setAutoRaise(True)
        self.addImage.setObjectName("addImage")
        self.basicOperations.addWidget(self.addImage)
        self.btn_crop = QtWidgets.QToolButton(self.verticalLayoutWidget)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(crop_path), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_crop.setIcon(icon2)
        self.btn_crop.setIconSize(QtCore.QSize(36, 48))
        self.btn_crop.setAutoRaise(True)
        self.btn_crop.setObjectName("btn_crop")
        self.basicOperations.addWidget(self.btn_crop)
        self.btn_autoEnhancement = QtWidgets.QToolButton(self.verticalLayoutWidget)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(auto_enhancement_path), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_autoEnhancement.setIcon(icon3)
        self.btn_autoEnhancement.setIconSize(QtCore.QSize(36, 48))
        self.btn_autoEnhancement.setAutoRaise(True)
        self.btn_autoEnhancement.setObjectName("btn_autoEnhancement")
        self.basicOperations.addWidget(self.btn_autoEnhancement)
        self.btn_inverse = QtWidgets.QToolButton(self.verticalLayoutWidget)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(rgb_path), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_inverse.setIcon(icon4)
        self.btn_inverse.setIconSize(QtCore.QSize(36, 48))
        self.btn_inverse.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        self.btn_inverse.setAutoRaise(True)
        self.btn_inverse.setObjectName("btn_inverse")
        self.basicOperations.addWidget(self.btn_inverse)
        self.btn_blur = QtWidgets.QToolButton(self.verticalLayoutWidget)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(blur_path), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_blur.setIcon(icon5)
        self.btn_blur.setIconSize(QtCore.QSize(36, 48))
        self.btn_blur.setAutoRaise(True)
        self.btn_blur.setObjectName("btn_blur")
        self.basicOperations.addWidget(self.btn_blur)
        self.btn_flip = QtWidgets.QToolButton(self.verticalLayoutWidget)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(flip_path), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_flip.setIcon(icon6)
        self.btn_flip.setIconSize(QtCore.QSize(36, 48))
        self.btn_flip.setAutoRaise(True)
        self.btn_flip.setObjectName("btn_flip")
        self.basicOperations.addWidget(self.btn_flip)
        self.btn_rotate = QtWidgets.QToolButton(self.verticalLayoutWidget)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(rotate_path), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_rotate.setIcon(icon7)
        self.btn_rotate.setIconSize(QtCore.QSize(36, 48))
        self.btn_rotate.setAutoRaise(True)
        self.btn_rotate.setObjectName("btn_rotate")
        self.basicOperations.addWidget(self.btn_rotate)
        self.btn_brightness = QtWidgets.QToolButton(self.verticalLayoutWidget)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(brightness_path), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_brightness.setIcon(icon8)
        self.btn_brightness.setIconSize(QtCore.QSize(36, 48))
        self.btn_brightness.setAutoRaise(True)
        self.btn_brightness.setObjectName("btn_brightness")
        self.basicOperations.addWidget(self.btn_brightness)
        self.btn_contrast = QtWidgets.QToolButton(self.verticalLayoutWidget)
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap(contrast_path), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_contrast.setIcon(icon9)
        self.btn_contrast.setIconSize(QtCore.QSize(36, 48))
        self.btn_contrast.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        self.btn_contrast.setAutoRaise(True)
        self.btn_contrast.setObjectName("btn_contrast")
        self.basicOperations.addWidget(self.btn_contrast)
        self.frame_image = QtWidgets.QFrame(self.centralwidget)
        self.frame_image.setGeometry(QtCore.QRect(110, 90, 601, 501))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_image.sizePolicy().hasHeightForWidth())
        self.frame_image.setSizePolicy(sizePolicy)
        self.frame_image.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.frame_image.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_image.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_image.setObjectName("frame_image")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame_image)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.frame_image)
        self.label.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.label.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.label.setText("")

        #Resim ekle.
        def convPixMap(image):
            image = cv.cvtColor(image,cv.COLOR_BGR2RGB)
            h, w, ch = image.shape
            bytesPerLine = 3 * w
            pixImg = QtGui.QImage(image, w, h, bytesPerLine, QtGui.QImage.Format_RGB888) #.rgbSwapped()
            return pixImg

        # Başlangıçta boş resim görüntüsü şeklindeki görünümü oluştur.
        original_image = cv.imread(image_path_bos)
        pixImg = convPixMap(original_image)

        self.label.setPixmap(QtGui.QPixmap(pixImg))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(550, 630, 161, 81))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.btn_apply = QtWidgets.QToolButton(self.horizontalLayoutWidget)
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap(apply_path), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_apply.setIcon(icon10)
        self.btn_apply.setIconSize(QtCore.QSize(36, 48))
        self.btn_apply.setAutoRaise(True)
        self.btn_apply.setObjectName("btn_apply")
        self.horizontalLayout_2.addWidget(self.btn_apply)
        self.btn_clear = QtWidgets.QToolButton(self.horizontalLayoutWidget)
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap(clear_path), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_clear.setIcon(icon11)
        self.btn_clear.setIconSize(QtCore.QSize(36, 48))
        self.btn_clear.setAutoRaise(True)
        self.btn_clear.setObjectName("btn_clear")
        self.horizontalLayout_2.addWidget(self.btn_clear)
        self.btn_save = QtWidgets.QToolButton(self.horizontalLayoutWidget)
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap(save_path), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_save.setIcon(icon12)
        self.btn_save.setIconSize(QtCore.QSize(36, 48))
        self.btn_save.setAutoRaise(True)
        self.btn_save.setObjectName("btn_save")
        self.horizontalLayout_2.addWidget(self.btn_save)
        self.lbl_image_name = QtWidgets.QLabel(self.centralwidget)
        self.lbl_image_name.setGeometry(QtCore.QRect(320, 30, 261, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lbl_image_name.setFont(font)
        self.lbl_image_name.setObjectName("lbl_image_name")
        self.frame_brightness = QtWidgets.QFrame(self.centralwidget)
        self.frame_brightness.setGeometry(QtCore.QRect(60, 530, 171, 82))
        self.frame_brightness.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_brightness.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_brightness.setObjectName("frame_brightness")
        self.formLayout = QtWidgets.QFormLayout(self.frame_brightness)
        self.formLayout.setObjectName("formLayout")
        self.label_darker = QtWidgets.QLabel(self.frame_brightness)
        self.label_darker.setObjectName("label_darker")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label_darker)
        self.label_lighter = QtWidgets.QLabel(self.frame_brightness)
        self.label_lighter.setObjectName("label_lighter")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.label_lighter)
        self.slider_positive = QtWidgets.QSlider(self.frame_brightness)
        self.slider_positive.setOrientation(QtCore.Qt.Horizontal)
        self.slider_positive.setObjectName("slider_positive")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.slider_positive)
        self.slider_lighter = QtWidgets.QSlider(self.frame_brightness)
        self.slider_lighter.setOrientation(QtCore.Qt.Horizontal)
        self.slider_lighter.setObjectName("slider_lighter")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.slider_lighter)
        self.frame_rotation = QtWidgets.QFrame(self.centralwidget)
        self.frame_rotation.setGeometry(QtCore.QRect(60, 440, 141, 80))
        self.frame_rotation.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_rotation.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_rotation.setObjectName("frame_rotation")
        self.txt_rotateAngle = QtWidgets.QLineEdit(self.frame_rotation)
        self.txt_rotateAngle.setGeometry(QtCore.QRect(10, 30, 51, 41))
        self.txt_rotateAngle.setObjectName("txt_rotateAngle")
        self.btn_apply_rotation = QtWidgets.QToolButton(self.frame_rotation)
        self.btn_apply_rotation.setGeometry(QtCore.QRect(80, 30, 31, 41))
        self.btn_apply_rotation.setIcon(icon10)
        self.btn_apply_rotation.setIconSize(QtCore.QSize(36, 48))
        self.btn_apply_rotation.setAutoRaise(True)
        self.btn_apply_rotation.setObjectName("btn_apply_rotation")
        self.label_2 = QtWidgets.QLabel(self.frame_rotation)
        self.label_2.setGeometry(QtCore.QRect(30, 0, 91, 31))
        self.label_2.setObjectName("label_2")
        self.frame_flip = QtWidgets.QFrame(self.centralwidget)
        self.frame_flip.setGeometry(QtCore.QRect(60, 340, 113, 116))
        self.frame_flip.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_flip.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_flip.setObjectName("frame_flip")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.frame_flip)
        self.verticalLayout.setObjectName("verticalLayout")
        self.btn_flip_y = QtWidgets.QPushButton(self.frame_flip)
        self.btn_flip_y.setObjectName("btn_flip_y")
        self.verticalLayout.addWidget(self.btn_flip_y)
        self.btn_flip_x = QtWidgets.QPushButton(self.frame_flip)
        self.btn_flip_x.setObjectName("btn_flip_x")
        self.verticalLayout.addWidget(self.btn_flip_x)
        self.btn_flip_x_3 = QtWidgets.QPushButton(self.frame_flip)
        self.btn_flip_x_3.setAutoRepeat(False)
        self.btn_flip_x_3.setAutoExclusive(False)
        self.btn_flip_x_3.setAutoDefault(False)
        self.btn_flip_x_3.setObjectName("btn_flip_x_3")
        self.verticalLayout.addWidget(self.btn_flip_x_3)
        self.frame_contrast = QtWidgets.QFrame(self.centralwidget)
        self.frame_contrast.setGeometry(QtCore.QRect(60, 610, 181, 82))
        self.frame_contrast.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_contrast.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_contrast.setObjectName("frame_contrast")
        self.formLayout_2 = QtWidgets.QFormLayout(self.frame_contrast)
        self.formLayout_2.setObjectName("formLayout_2")
        self.label_darker_2 = QtWidgets.QLabel(self.frame_contrast)
        self.label_darker_2.setObjectName("label_darker_2")
        self.formLayout_2.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label_darker_2)
        self.slider_increase = QtWidgets.QSlider(self.frame_contrast)
        self.slider_increase.setOrientation(QtCore.Qt.Horizontal)
        self.slider_increase.setObjectName("slider_increase")
        self.formLayout_2.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.slider_increase)
        self.label_lighter_2 = QtWidgets.QLabel(self.frame_contrast)
        self.label_lighter_2.setObjectName("label_lighter_2")
        self.formLayout_2.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.label_lighter_2)
        self.slider_decrease = QtWidgets.QSlider(self.frame_contrast)
        self.slider_decrease.setOrientation(QtCore.Qt.Horizontal)
        self.slider_decrease.setObjectName("slider_decrease")
        self.formLayout_2.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.slider_decrease)
        self.frame_filters = QtWidgets.QFrame(self.centralwidget)
        self.frame_filters.setGeometry(QtCore.QRect(750, 70, 161, 641))
        self.frame_filters.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_filters.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_filters.setObjectName("frame_filters")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame_filters)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.btn_filter1 = QtWidgets.QPushButton(self.frame_filters)
        self.btn_filter1.setObjectName("btn_filter1")
        self.verticalLayout_2.addWidget(self.btn_filter1)
        self.btn_filter2 = QtWidgets.QPushButton(self.frame_filters)
        self.btn_filter2.setObjectName("btn_filter2")
        self.verticalLayout_2.addWidget(self.btn_filter2)
        self.btn_filter3 = QtWidgets.QPushButton(self.frame_filters)
        self.btn_filter3.setObjectName("btn_filter3")
        self.verticalLayout_2.addWidget(self.btn_filter3)
        self.btn_filter4 = QtWidgets.QPushButton(self.frame_filters)
        self.btn_filter4.setObjectName("btn_filter4")
        self.verticalLayout_2.addWidget(self.btn_filter4)
        self.btn_flter5 = QtWidgets.QPushButton(self.frame_filters)
        self.btn_flter5.setObjectName("btn_flter5")
        self.verticalLayout_2.addWidget(self.btn_flter5)
        self.btn_filter6 = QtWidgets.QPushButton(self.frame_filters)
        self.btn_filter6.setObjectName("btn_filter6")
        self.verticalLayout_2.addWidget(self.btn_filter6)
        self.btn_filter7 = QtWidgets.QPushButton(self.frame_filters)
        self.btn_filter7.setObjectName("btn_filter7")
        self.verticalLayout_2.addWidget(self.btn_filter7)
        self.btn_filter8 = QtWidgets.QPushButton(self.frame_filters)
        self.btn_filter8.setObjectName("btn_filter8")
        self.verticalLayout_2.addWidget(self.btn_filter8)
        self.btn_filter9 = QtWidgets.QPushButton(self.frame_filters)
        self.btn_filter9.setObjectName("btn_filter9")
        self.verticalLayout_2.addWidget(self.btn_filter9)
        self.btn_filter10 = QtWidgets.QPushButton(self.frame_filters)
        self.btn_filter10.setObjectName("btn_filter10")
        self.verticalLayout_2.addWidget(self.btn_filter10)
        self.btn_filter11 = QtWidgets.QPushButton(self.frame_filters)
        self.btn_filter11.setObjectName("btn_filter11")
        self.verticalLayout_2.addWidget(self.btn_filter11)
        self.btn_filter12 = QtWidgets.QPushButton(self.frame_filters)
        self.btn_filter12.setObjectName("btn_filter12")
        self.verticalLayout_2.addWidget(self.btn_filter12)
        self.btn_filter13 = QtWidgets.QPushButton(self.frame_filters)
        self.btn_filter13.setObjectName("btn_filter13")
        self.verticalLayout_2.addWidget(self.btn_filter13)
        self.btn_filter14 = QtWidgets.QPushButton(self.frame_filters)
        self.btn_filter14.setObjectName("btn_filter14")
        self.verticalLayout_2.addWidget(self.btn_filter14)
        self.btn_filter15 = QtWidgets.QPushButton(self.frame_filters)
        self.btn_filter15.setObjectName("btn_filter15")
        self.verticalLayout_2.addWidget(self.btn_filter15)
        self.btn_filter16 = QtWidgets.QPushButton(self.frame_filters)
        self.btn_filter16.setObjectName("btn_filter16")
        self.verticalLayout_2.addWidget(self.btn_filter16)
        self.btn_filter17 = QtWidgets.QPushButton(self.frame_filters)
        self.btn_filter17.setObjectName("btn_filter17")
        self.verticalLayout_2.addWidget(self.btn_filter17)
        self.btn_filter18 = QtWidgets.QPushButton(self.frame_filters)
        self.btn_filter18.setObjectName("btn_filter18")
        self.verticalLayout_2.addWidget(self.btn_filter18)
        self.btn_filter19 = QtWidgets.QPushButton(self.frame_filters)
        self.btn_filter19.setObjectName("btn_filter19")
        self.verticalLayout_2.addWidget(self.btn_filter19)
        self.btn_filter20 = QtWidgets.QPushButton(self.frame_filters)
        self.btn_filter20.setObjectName("btn_filter20")
        self.verticalLayout_2.addWidget(self.btn_filter20)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(800, 30, 61, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.frame_crop = QtWidgets.QFrame(self.centralwidget)
        self.frame_crop.setGeometry(QtCore.QRect(50, 20, 281, 141))
        self.frame_crop.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_crop.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_crop.setObjectName("frame_crop")
        self.start_points = QtWidgets.QGroupBox(self.frame_crop)
        self.start_points.setGeometry(QtCore.QRect(20, 0, 171, 61))
        self.start_points.setObjectName("start_points")
        self.start_Y = QtWidgets.QLineEdit(self.start_points)
        self.start_Y.setGeometry(QtCore.QRect(120, 20, 41, 31))
        self.start_Y.setObjectName("start_Y")
        self.label_8 = QtWidgets.QLabel(self.start_points)
        self.label_8.setGeometry(QtCore.QRect(90, 30, 21, 16))
        self.label_8.setObjectName("label_8")
        self.start_X = QtWidgets.QLineEdit(self.start_points)
        self.start_X.setGeometry(QtCore.QRect(30, 20, 41, 31))
        self.start_X.setObjectName("start_X")
        self.label_5 = QtWidgets.QLabel(self.start_points)
        self.label_5.setGeometry(QtCore.QRect(10, 30, 21, 16))
        self.label_5.setObjectName("label_5")
        self.finish_points = QtWidgets.QGroupBox(self.frame_crop)
        self.finish_points.setGeometry(QtCore.QRect(20, 70, 171, 61))
        self.finish_points.setObjectName("finish_points")
        self.finish_Y = QtWidgets.QLineEdit(self.finish_points)
        self.finish_Y.setGeometry(QtCore.QRect(120, 20, 41, 31))
        self.finish_Y.setObjectName("finish_Y")
        self.finish_X = QtWidgets.QLineEdit(self.finish_points)
        self.finish_X.setGeometry(QtCore.QRect(30, 20, 41, 31))
        self.finish_X.setObjectName("finish_X")
        self.label_9 = QtWidgets.QLabel(self.finish_points)
        self.label_9.setGeometry(QtCore.QRect(90, 30, 21, 16))
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.finish_points)
        self.label_10.setGeometry(QtCore.QRect(10, 30, 21, 16))
        self.label_10.setObjectName("label_10")
        self.btn_apply_crop = QtWidgets.QToolButton(self.frame_crop)
        self.btn_apply_crop.setGeometry(QtCore.QRect(220, 80, 31, 41))
        self.btn_apply_crop.setIcon(icon10)
        self.btn_apply_crop.setIconSize(QtCore.QSize(36, 48))
        self.btn_apply_crop.setAutoRaise(True)
        self.btn_apply_crop.setObjectName("btn_apply_crop")
        self.groupBox = QtWidgets.QGroupBox(self.frame_crop)
        self.groupBox.setGeometry(QtCore.QRect(200, 0, 71, 71))
        self.groupBox.setObjectName("groupBox")
        self.lbl_max_X = QtWidgets.QLabel(self.groupBox)
        self.lbl_max_X.setGeometry(QtCore.QRect(10, 20, 47, 13))
        self.lbl_max_X.setObjectName("lbl_max_X")
        self.lbl_max_Y = QtWidgets.QLabel(self.groupBox)
        self.lbl_max_Y.setGeometry(QtCore.QRect(10, 40, 47, 13))
        self.lbl_max_Y.setObjectName("lbl_max_Y")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        ### GUI Design is over ###

        ### Initial design issues such as hiding frames,button enabled/disabled.. ###
        def toEnable(val):
            ## button disabled/enabled configuration.
            self.btn_brightness.setEnabled(val)
            self.btn_rotate.setEnabled(val)
            self.btn_contrast.setEnabled(val)
            self.btn_save.setEnabled(val)
            self.btn_clear.setEnabled(val)
            self.btn_blur.setEnabled(val)
            self.btn_crop.setEnabled(val)
            self.btn_flip.setEnabled(val)
            self.btn_inverse.setEnabled(val)
            self.btn_autoEnhancement.setEnabled(val)
            self.btn_apply.setEnabled(val)
            self.btn_filter1.setEnabled(val)
            self.btn_filter2.setEnabled(val)
            self.btn_filter3.setEnabled(val)
            self.btn_filter4.setEnabled(val)
            self.btn_flter5.setEnabled(val)
            self.btn_filter6.setEnabled(val)
            self.btn_filter7.setEnabled(val)
            self.btn_filter8.setEnabled(val)
            self.btn_filter9.setEnabled(val)
            self.btn_filter10.setEnabled(val)
            self.btn_filter11.setEnabled(val)
            self.btn_filter12.setEnabled(val)
            self.btn_filter13.setEnabled(val)
            self.btn_filter14.setEnabled(val)
            self.btn_filter15.setEnabled(val)
            self.btn_filter16.setEnabled(val)
            self.btn_filter17.setEnabled(val)
            self.btn_filter18.setEnabled(val)
            self.btn_filter19.setEnabled(val)
            self.btn_filter20.setEnabled(val)

        def hideFrames():
            # Set the frames unvisible.
            self.btn_apply.hide()
            self.frame_contrast.hide()
            self.frame_flip.hide()
            self.frame_rotation.hide()
            self.frame_brightness.hide()
            self.frame_crop.hide()

        toEnable(False)  # Initially all buttons disabled except add button.
        hideFrames()

        ### BASIC OPERATIONS ###

        def load_image_path():
            # Dosya yolunu döndüren fonksiyon.
            filename = QFileDialog.getOpenFileName(None, 'Load Image', '', 'Image file (*.jpg | *.png | *.jpeg)')
            image_path = filename[0]
            print("Path is loaded:", image_path)
            self.lbl_image_name.setText(image_path.split(sep='/')[-1])
            return image_path

        self.original_image_path = image_path_bos
        def getImage():
            # Dosyadan okunan resmi open cv ile okuyan fonksiyon.
            image_path = load_image_path()
            self.original_image_path = image_path
            original_image = cv.imread(image_path)
            return original_image

        def convPixMap(image):
            # OpenCV ile okunan resim RGB formatına dönüştürülür. RGB format resim QImage dönüştürülür.
            image = cv.cvtColor(image, cv.COLOR_BGR2RGB)
            h, w, ch = image.shape
            bytesPerLine = 3 * w
            pixImg = QtGui.QImage(image, w, h, bytesPerLine, QtGui.QImage.Format_RGB888)
            return pixImg
        def getCurrentImage():
            # Mevcut QPixMap yapısı içerisindeki QImage'i alan ve numpy array haline dönüştüren fonksiyon. Böylece gerekli işlemleri uygulayabiliyoruz.
            pixImage = self.label.pixmap().toImage()  # .convertToFormat(QtGui.QImage.Format.Format_RGB32)

            width = pixImage.width()
            height = pixImage.height()

            ptr = pixImage.bits()
            ptr.setsize(height * width * 4)
            return np.array(np.frombuffer(ptr, np.uint8).reshape((height, width, 4)))

        self.operated_image = getCurrentImage()  # filter için kullanılcak
        def updateImage(image):
            # QImage Qpixmap yapısına dönüştüren fonksiyon.
            pixImg = convPixMap(image)
            self.label.setPixmap(QtGui.QPixmap(pixImg))  # QImage -> QPixMap dönüştürülür .
            self.label.setScaledContents(True)
            self.label.setObjectName("label")
        def updateCroppedImage(image):
            # QImage Qpixmap yapısına dönüştüren fonksiyon.
            pixImg = convPixMap(image)
            self.label.setPixmap(QtGui.QPixmap(pixImg))  # QImage -> QPixMap dönüştürülür .
            self.label.setScaledContents(False)
            self.label.setObjectName("label")
        def on_adding_image():
            # Yukarıdaki fonksiyonları birlikte çalıştır ve diğer butonları çalışabilir yapan fonksiyon.
            image = getImage()
            self.operated_image = image
            updateImage(image)
            toEnable(True)

        def croppedImageasArea(ix, iy, fx, fy, image):
            '''
            Bu fonksiyon belli alandaki piksel değerlerini alarak kırpma işlemini yapar.
            ix : Başlangıç X koordinatı
            iy : Başlangıç Y koordinatı
            fx : Bitiş X koordinat
            fy : Bitiş Y koordinatı
            image: kırpılacak resim
            croppedImage: kırpılmış resim
            '''
            max_x, max_y = image.shape[:2]
            if ix < 0 or iy < 0:
                raise ValueError('Başlangıç koordinatları 0 dan küçük olamaz!')
            elif fx > max_x or fy > max_y:
                raise ValueError('Bitiş koordinatları resimin boyutundan büyük olamaz!')
            else:
                croppedImage = image[ix:fx, iy:fy]
                return croppedImage

        self.count_crop = 0
        def show_crop():
            self.count_crop += 1
            if self.count_crop % 2 == 1:
                self.frame_crop.show()
                self.btn_apply_crop.clicked.connect(on_crop)
                max_h, max_w, _ = getCurrentImage().shape
                max_h_text = 'MaxX:'+str(max_h)
                max_w_text = 'MaxY:'+ str(max_w)
                self.lbl_max_X.setText(max_h_text)
                self.lbl_max_Y.setText(max_w_text)

                ## Others buttons disabled.
                self.addImage.setEnabled(False)
                self.btn_flip.setEnabled(False)
                self.btn_inverse.setEnabled(False)
                self.btn_rotate.setEnabled(False)
                self.btn_brightness.setEnabled(False)
                self.btn_contrast.setEnabled(False)
                self.btn_autoEnhancement.setEnabled(False)
                self.btn_blur.setEnabled(False)
            else:
                self.frame_crop.hide()
                self.addImage.setEnabled(True)
                self.btn_flip.setEnabled(True)
                self.btn_inverse.setEnabled(True)
                self.btn_rotate.setEnabled(True)
                self.btn_brightness.setEnabled(True)
                self.btn_contrast.setEnabled(True)
                self.btn_autoEnhancement.setEnabled(True)
                self.btn_blur.setEnabled(True)
        def on_crop():
            if self.start_X.text() or self.start_Y.text() or self.finish_X.text() or self.finish_Y.text() != '':
                current_image = getCurrentImage()
                ix = int(self.start_X.text())
                iy = int(self.start_Y.text())
                fx = int(self.finish_X.text())
                fy = int(self.finish_Y.text())
                image = croppedImageasArea(ix, iy, fx, fy, current_image)
                self.operated_image = image
                updateCroppedImage(image)
                self.frame_crop.hide()
                self.count_crop += 1

                self.frame_crop.hide()
                self.addImage.setEnabled(True)
                self.btn_flip.setEnabled(True)
                self.btn_inverse.setEnabled(True)
                self.btn_rotate.setEnabled(True)
                self.btn_brightness.setEnabled(True)
                self.btn_contrast.setEnabled(True)
                self.btn_autoEnhancement.setEnabled(True)
                self.btn_blur.setEnabled(True)
            else:
                raise Exception("POINTS CANT BE EMPTY")
        def adapHE(image):
            '''
            Automatic Contrast enhancement with CLAHE.
            Normal histogram equalization kullanıldığında çok parlak resimlerde detaylarda kayıplar olabildğinden adaptive histogram kullandım.

            Girdi: Histogram equalizatin uygulanacak resim.
            '''
            # convert image BGR to LAB
            lab = cv.cvtColor(image, cv.COLOR_BGR2LAB)
            # split channels
            L, a, b = cv.split(
                lab)  # L lightness değerini tutan katman olduğundan buradaki intensiy değerlerini histograma döküyoruz.
            # create Contrast Limited Adaptive Histogram Equation : Belli bir contrast sınırı koyuluyor böylece threshold değerinin altındakiler histograma dahil edilmiyor aynı kalıyor değerleri.
            # Normalizasyon yapılmadığından değerler değişmiyor ve kayıp normal histogram normalizasyona göre daha az oluyor.
            clahe = cv.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
            # Apply L channel
            ch_L = clahe.apply(L)
            # Merge all channel
            cL_img = cv.merge((ch_L, a, b))
            # Convert LAB to BGR
            final = cv.cvtColor(cL_img, cv.COLOR_LAB2BGR)
            return final
        def on_autoenh():
            # Enhancement değerini değiştir.
            not_changed_image = getCurrentImage()
            image = adapHE(not_changed_image)
            self.operated_image = image
            updateImage(image)

        def blurFilter(original_image):
            image = cv.GaussianBlur(original_image, (5, 5), 1.2)
            return image

        def on_blur():
            not_changed_image = getCurrentImage()
            image = blurFilter(not_changed_image)
            self.operated_image = image
            updateImage(image)

        def flipOrMirror(original_image, metod):
            '''
            original_image : flip ya da mirror işlemi uygulayacağımız görüntü
            metod : uygulanacak flip/mirror yönü. Mesela x -> X ekseni çevresinde, y yekseni , b hem x hem y aynı anda .
            '''
            if metod == 'x':
                return cv.flip(original_image, 0)
            if metod == 'y':
                return cv.flip(original_image, 1)
            if metod == 'xy':
                return cv.flip(original_image, -1)

        self.count = 0

        def show_flips():
            self.count += 1
            if self.count % 2 == 1:
                self.frame_flip.show()
                self.addImage.setEnabled(False)
                self.btn_crop.setEnabled(False)
                self.btn_inverse.setEnabled(False)
                self.btn_rotate.setEnabled(False)
                self.btn_brightness.setEnabled(False)
                self.btn_contrast.setEnabled(False)
                self.btn_autoEnhancement.setEnabled(False)
                self.btn_blur.setEnabled(False)
            else:
                self.frame_flip.hide()
                self.addImage.setEnabled(True)
                self.btn_crop.setEnabled(True)
                self.btn_inverse.setEnabled(True)
                self.btn_rotate.setEnabled(True)
                self.btn_brightness.setEnabled(True)
                self.btn_contrast.setEnabled(True)
                self.btn_autoEnhancement.setEnabled(True)
                self.btn_blur.setEnabled(True)
        # Flip butonuna bastığında yeni frame açılcak 3 seçenek olacak hangisi tıklanırsa connect ile o fonksiyona bağlanacak.
        def on_flip_x():
            not_changed_image = getCurrentImage()
            image = flipOrMirror(not_changed_image, 'x')
            self.operated_image = image
            updateImage(image)
            self.count += 1
            self.frame_flip.hide()
            self.addImage.setEnabled(True)
            self.btn_crop.setEnabled(True)
            self.btn_inverse.setEnabled(True)
            self.btn_rotate.setEnabled(True)
            self.btn_brightness.setEnabled(True)
            self.btn_contrast.setEnabled(True)
            self.btn_autoEnhancement.setEnabled(True)
            self.btn_blur.setEnabled(True)
        def on_flip_y():
            not_changed_image = getCurrentImage()
            image = flipOrMirror(not_changed_image, 'y')
            self.operated_image = image
            updateImage(image)
            self.count += 1
            self.frame_flip.hide()
            self.addImage.setEnabled(True)
            self.btn_crop.setEnabled(True)
            self.btn_inverse.setEnabled(True)
            self.btn_rotate.setEnabled(True)
            self.btn_brightness.setEnabled(True)
            self.btn_contrast.setEnabled(True)
            self.btn_autoEnhancement.setEnabled(True)
            self.btn_blur.setEnabled(True)
        def on_flip_xy():
            not_changed_image = getCurrentImage()
            image = flipOrMirror(not_changed_image, 'xy')
            self.operated_image = image
            updateImage(image)
            self.count += 1
            self.frame_flip.hide()
            self.addImage.setEnabled(True)
            self.btn_crop.setEnabled(True)
            self.btn_inverse.setEnabled(True)
            self.btn_rotate.setEnabled(True)
            self.btn_brightness.setEnabled(True)
            self.btn_contrast.setEnabled(True)
            self.btn_autoEnhancement.setEnabled(True)
            self.btn_blur.setEnabled(True)
        def rotate_image(original_image, rotation_angle):
            """
            Rotation Matrix
            cos 0  -sin 0   | x |
            sin 0   cos 0   | y |
            Resmi döndürmek için resim açısı ve döndürülecek resmi alıp döndürülmüş resmi output olarak veren fonksiyondur.
            original_image : döndürülecek resim
            rotation_angle : döndürme açısı
            rotated_image : döndürülmüş resim
            """
            # Bir görüntü (boy,en,kanal sayısı) olmak üzere 3 elemanlı bi array. İlk iki elemanı bize lazım olan değerleri barındırıyor.
            h, w = original_image.shape[:2]
            # Görüntünün merkez noktasına göre döndürme yapacağımızdan bu noktaları buluyoruz.
            center_point = (w / 2,
                            h / 2)  # Rotation matrix bunların transpose aldığı için ters sırada veriyoruz. Yani (h,w) değil (w,h) olarak.
            rotation_matris = cv.getRotationMatrix2D(center_point, rotation_angle, 1.)
            # getRotationMatrix2D fonksiyonu 3 parametre alır; merkez noktalar, döndürme açısı ve resmin scale değeri
            # Rotation matrisi rotasyon için önemli olan sinüs ve kosinüs değerlerini hesaplar.
            cos = rotation_matris[0, 0]
            sin = rotation_matris[0, 1]
            # Yeni pencere boyutunu hesaplayalım.
            max_h = int(w * abs(cos) + h * abs(sin))
            max_w = int(w * abs(sin) + h * abs(cos))
            # Görüntünün yeni boyutlara göre merkez noktasını hesaplayalım.
            rotation_matris[0, 2] += (max_h / 2) - center_point[0]
            rotation_matris[1, 2] += (max_w / 2) - center_point[1]

            # Orijinal resmimizi yeni en ve boy oranları ve hesapladığımız döndürme matrisini uygulayarak döndürelim.
            # Arka planı transparent yapamadığım için borderValue parametresiyle beyaz olarak ayarladım.
            rotated_image = cv.warpAffine(original_image, rotation_matris, (max_h, max_w),
                                          borderValue=(255, 255, 255))
            return rotated_image

            # Rotate bastığında küçük bir kutu açılacak, açı değeri yazılacak apply'e basıldığında fonksiyon çalışcak.

        self.count_rotate = 0
        def show_rotate():
            self.count_rotate += 1
            if self.count_rotate % 2 == 1:
                self.frame_rotation.show()
                self.btn_apply_rotation.clicked.connect(on_rotate)
                self.addImage.setEnabled(False)
                self.btn_crop.setEnabled(False)
                self.btn_inverse.setEnabled(False)
                self.btn_flip.setEnabled(False)
                self.btn_brightness.setEnabled(False)
                self.btn_contrast.setEnabled(False)
                self.btn_autoEnhancement.setEnabled(False)
                self.btn_blur.setEnabled(False)
            else:
                self.frame_rotation.hide()
                self.addImage.setEnabled(True)
                self.btn_crop.setEnabled(True)
                self.btn_inverse.setEnabled(True)
                self.btn_flip.setEnabled(True)
                self.btn_brightness.setEnabled(True)
                self.btn_contrast.setEnabled(True)
                self.btn_autoEnhancement.setEnabled(True)
                self.btn_blur.setEnabled(True)
        def on_rotate():
            if self.txt_rotateAngle.text() != '':
                not_changed_image = getCurrentImage()
                rotation_angle = int(self.txt_rotateAngle.text())  # Textboxtan alınacak bu değer.
                image = rotate_image(not_changed_image, rotation_angle)
                self.operated_image = image
                updateImage(image)
                self.frame_rotation.hide()
                self.count_rotate += 1
                self.addImage.setEnabled(True)
                self.btn_crop.setEnabled(True)
                self.btn_inverse.setEnabled(True)
                self.btn_flip.setEnabled(True)
                self.btn_brightness.setEnabled(True)
                self.btn_contrast.setEnabled(True)
                self.btn_autoEnhancement.setEnabled(True)
                self.btn_blur.setEnabled(True)
            else:
                raise Exception("Invalid Angle")
        def changeContrast(img, contrastRate, lightRate):
            '''
            OpenCV içerisinde contrast ve ligth değerleri aşağıdaki lineer formülle ayarlanabiliyormuş.
            f(x) = ax+b , a değeri : contrast,
                          x değeri : görüntümüz
                          b değeri : lightness.
            Contrast rate 0-1 arasında ise daha karanlık bir contrast değeri elde edilirken.
            1 de normal resim döndürüyor
            1 den büyükse contrast'ı arttırıyor.
            lightRate ise -255 ile +255 arasında. 0 değeri ise normal resmi döndürüyor.
            '''
            # Burada arayüzden alınan contrastRate ve lightRate'e göre bu fonksiyon çalıştırılabilir.
            image = cv.addWeighted(img, contrastRate, np.zeros(img.shape, img.dtype), 0, lightRate)
            return image

        self.count_contrast = 0
        def show_contrast():
            self.count_contrast += 1
            if self.count_contrast % 2 == 1:
                self.frame_contrast.show()
                self.addImage.setEnabled(False)
                self.btn_crop.setEnabled(False)
                self.btn_inverse.setEnabled(False)
                self.btn_flip.setEnabled(False)
                self.btn_brightness.setEnabled(False)
                self.btn_rotate.setEnabled(False)
                self.btn_autoEnhancement.setEnabled(False)
                self.btn_blur.setEnabled(False)
            else:
                self.frame_contrast.hide()
                self.addImage.setEnabled(True)
                self.btn_crop.setEnabled(True)
                self.btn_inverse.setEnabled(True)
                self.btn_flip.setEnabled(True)
                self.btn_brightness.setEnabled(True)
                self.btn_rotate.setEnabled(True)
                self.btn_autoEnhancement.setEnabled(True)
                self.btn_blur.setEnabled(True)

        self.count_brightness = 0
        def on_brighter():
            not_changed_image = getCurrentImage()
            lightRate = int(self.slider_lighter.value())
            image = changeContrast(not_changed_image, 1, lightRate)
            self.operated_image = image
            updateImage(image)
            self.count_brightness += 1
            print("Bright Value:", lightRate)
        def on_darker():
            not_changed_image = getCurrentImage()
            lightRate = 0 - int(self.slider_positive.value())
            image = changeContrast(not_changed_image, 1, lightRate)
            self.operated_image = image
            updateImage(image)
            self.count_brightness += 1
            print("Dark Value:", lightRate)
        def show_brightness():
            self.count_brightness += 1
            if self.count_brightness % 2 == 1:
                self.frame_brightness.show()
                self.frame_contrast.hide()
                self.addImage.setEnabled(False)
                self.btn_crop.setEnabled(False)
                self.btn_inverse.setEnabled(False)
                self.btn_flip.setEnabled(False)
                self.btn_contrast.setEnabled(False)
                self.btn_rotate.setEnabled(False)
                self.btn_autoEnhancement.setEnabled(False)
                self.btn_blur.setEnabled(False)
            else:
                self.frame_brightness.hide()
                self.frame_contrast.hide()
                self.addImage.setEnabled(True)
                self.btn_crop.setEnabled(True)
                self.btn_inverse.setEnabled(True)
                self.btn_flip.setEnabled(True)
                self.btn_contrast.setEnabled(True)
                self.btn_rotate.setEnabled(True)
                self.btn_autoEnhancement.setEnabled(True)
                self.btn_blur.setEnabled(True)
        def on_increase():
            not_changed_image = getCurrentImage()
            contrastRate = int(self.slider_increase.value() / 10)
            image = changeContrast(not_changed_image, contrastRate, 0)
            self.operated_image = image
            updateImage(image)
            self.count_brightness += 1
            print("Increase Value:", contrastRate)
        def on_decrease():
            not_changed_image = getCurrentImage()
            contrastRate = 0 - int(self.slider_decrease.value() / 100)
            image = changeContrast(not_changed_image, contrastRate, 0)
            self.operated_image = image
            updateImage(image)
            self.count_brightness += 1
            print("Decrease Value:", contrastRate)
        def inverseImage(img):
            '''
            Basitçe tüm piksel değerlerini 255' den çıkarıp değerleri tersine döndürüyor.
            '''
            inverse_image = 255 - img
            return inverse_image
        def on_inverse():
            not_changed_image = getCurrentImage()
            image = inverseImage(not_changed_image)
            self.operated_image = image
            updateImage(image)
        def on_clear():
            original_image = cv.imread(self.original_image_path)
            updateImage(original_image)
        def saveImage():
            img = self.label.pixmap().toImage()
            filename = QFileDialog.getSaveFileName(None, 'Save Image', 'new_image.png', '*.png')
            fn = filename[0]
            img.save(fn)

        ### Basic operations over.
        ## Filter operations ..
        ## Filters -- Aşağıda filtreler tanımlıdır.
        def yellowPencil(img):
            img_gray = cv.cvtColor(img, cv.COLOR_RGB2GRAY)
            img_blur = cv.medianBlur(img_gray, 7)
            kara_kalem = cv.adaptiveThreshold(img_blur, 255, cv.ADAPTIVE_THRESH_GAUSSIAN_C, cv.THRESH_BINARY, 7, 2)
            return kara_kalem

        def kara_kalem(img):
            img_gray = cv.cvtColor(img, cv.COLOR_RGB2GRAY)
            img_blur = cv.medianBlur(img_gray, 7)
            img3 = cv.adaptiveThreshold(img_blur, 255, cv.ADAPTIVE_THRESH_GAUSSIAN_C, cv.THRESH_BINARY, 7, 2)
            kara_kalem = cv.cvtColor(img3, cv.COLOR_GRAY2RGB)
            return kara_kalem

        def mysterious(img):
            # kuzeyden güneye
            kernel_emboss_1 = np.array([[0, -1, 0], [0, 0, 0], [0, 1, 0]])
            # doğudan batıya
            kernel_emboss_2 = np.array([[0, 0, 0], [1, 0, -1], [0, 0, 0]])

            vertical_emboss = cv.filter2D(img, -1, kernel_emboss_1) + 128
            horizontal_emboss = cv.filter2D(img, -1, kernel_emboss_2) + 128
            mysterious = cv.bitwise_and(vertical_emboss, horizontal_emboss)

            return mysterious

        def lemon_tree(img):
            img1 = cv.applyColorMap(img, cv.COLORMAP_COOL)
            img2 = cv.applyColorMap(img1, cv.COLORMAP_RAINBOW)
            kernel = np.array([[0, 0, 0],
                               [1, 0, -1],
                               [1, 1, 0]])
            final = cv.filter2D(img2, -1, kernel)
            return final

        def smurf(image):
            img1 = cv.applyColorMap(image, cv.COLORMAP_BONE)
            smurf = cv.applyColorMap(img1, cv.COLORMAP_HOT)
            return smurf

        def fluu(img):
            blur = cv.blur(img, (10, 10))
            a = cv.GaussianBlur(blur, (5, 5), 5)
            bulanik = cv.bilateralFilter(a, 9, 75, 75)
            return bulanik

        def darkness(img):

            # Extracting the height and width of an image
            rows, cols = img.shape[:2]
            X_resultant_kernel = cv.getGaussianKernel(cols, 200)
            Y_resultant_kernel = cv.getGaussianKernel(rows, 200)

            # generating resultant_kernel matrix
            resultant_kernel = Y_resultant_kernel * X_resultant_kernel.T

            mask = 300 * resultant_kernel / np.linalg.norm(resultant_kernel)
            output = np.copy(img)

            for i in range(3):
                output[:, :, i] = output[:, :, i] * mask
            return output

        def light_mysterious(img):
            # kuzeyden güneye
            kernel_emboss_1 = np.array([[0, -1, 0], [0, 0, 0], [0, 1, 0]])
            # doğudan batıya
            kernel_emboss_2 = np.array([[0, 0, 0], [1, 0, -1], [0, 0, 0]])

            vertical_emboss = cv.filter2D(img, -1, kernel_emboss_1) + 200
            horizontal_emboss = cv.filter2D(img, -1, kernel_emboss_2) + 200

            light_mysterious = cv.bitwise_and(vertical_emboss, horizontal_emboss)

            return light_mysterious

        def isimsiz(img):

            # Extracting the height and width of an image
            rows, cols = img.shape[:2]
            X_resultant_kernel = cv.getGaussianKernel(cols, 200)
            Y_resultant_kernel = cv.getGaussianKernel(rows, 200)

            # generating resultant_kernel matrix
            resultant_kernel = Y_resultant_kernel * X_resultant_kernel.T

            mask = 250 * resultant_kernel / np.linalg.norm(resultant_kernel)
            output = np.copy(img)

            for i in range(2):
                output[:, :, i] = output[:, :, i] * mask
            return output

        def greenish(self):
            gray = cv.cvtColor(self, cv.COLOR_BGR2GRAY)
            gray_1 = cv.medianBlur(gray, 5)
            edges = cv.adaptiveThreshold(gray_1, 255, cv.ADAPTIVE_THRESH_MEAN_C, cv.THRESH_BINARY, 9, 5)
            return edges

        def pina_colada(img):
            x_sobel = cv.Sobel(img, cv.CV_64F, 0, 1, ksize=5)
            lap = cv.Laplacian(x_sobel, cv.CV_64F, ksize=5)
            return lap

        def black_and_White(img):
            image = cv.cvtColor(img,cv.COLOR_BGR2GRAY)
            return image

        def phosphorous(image):
            kernel = np.ones((3, 3), np.uint8)
            m = cv.morphologyEx(image, cv.MORPH_GRADIENT, kernel)
            img1 = cv.applyColorMap(m, cv.COLORMAP_OCEAN)
            img2 = cv.applyColorMap(img1, cv.COLORMAP_CIVIDIS)
            a = cv.GaussianBlur(img2, (5, 5), 5)
            return a

        def g_phosphorous(image):
            kernel = np.ones((3, 3), np.uint8)
            m = cv.morphologyEx(image, cv.MORPH_GRADIENT, kernel)
            img1 = cv.applyColorMap(m, cv.COLORMAP_OCEAN)
            img2 = cv.applyColorMap(img1, cv.COLORMAP_CIVIDIS)
            a = cv.GaussianBlur(img2, (5, 5), 5)
            return a

        def oil_paint(image):
            kernel = np.ones((3, 3), np.uint8)
            d = cv.dilate(image, kernel)
            gray = cv.cvtColor(d, cv.COLOR_BGR2GRAY)
            return gray

        def bluish(image):
            kernel = np.ones((5, 5), np.uint8)
            e = cv.erode(image, kernel)
            img1 = cv.applyColorMap(e, cv.COLORMAP_TWILIGHT_SHIFTED)
            return img1



        def monster(img):
            img1 = cv.applyColorMap(img, cv.COLORMAP_TWILIGHT_SHIFTED)
            img2 = cv.applyColorMap(img1, cv.COLORMAP_CIVIDIS)
            final = cv.applyColorMap(img2, cv.COLORMAP_JET)
            a = cv.applyColorMap(final, cv.COLORMAP_TURBO)

            return a

        def fire(img):
            img1 = cv.applyColorMap(img, cv.COLORMAP_OCEAN)
            img2 = cv.applyColorMap(img1, cv.COLORMAP_CIVIDIS)
            final = cv.applyColorMap(img2, cv.COLORMAP_JET)
            return final



        ## Yukarıda filtreler tanımlıdır..
        ### Filtre butonuna basıldığında çalışacak fonksiyonlar..
        def on_filter1():
            not_changed_image = self.operated_image
            image = black_and_White(not_changed_image)
            updateImage(image)

        def on_filter2():
            not_changed_image = self.operated_image
            image = yellowPencil(not_changed_image)
            updateImage(image)

        def on_filter3():
            not_changed_image = self.operated_image
            image = greenish(not_changed_image)
            updateImage(image)

        def on_filter4():
            not_changed_image = self.operated_image
            image = isimsiz(not_changed_image)
            updateImage(image)

        def on_filter5():
            not_changed_image = self.operated_image
            image = light_mysterious(not_changed_image)
            updateImage(image)

        def on_filter6():
            not_changed_image = self.operated_image
            image = mysterious(not_changed_image)
            updateImage(image)

        def on_filter7():
            not_changed_image = self.operated_image
            image = darkness(not_changed_image)
            updateImage(image)

        def on_filter8():
            not_changed_image = self.operated_image
            image = smurf(not_changed_image)
            updateImage(image)

        def on_filter9():
            not_changed_image = self.operated_image
            image = black_and_White(not_changed_image)
            updateImage(image)

        def on_filter10():
            not_changed_image = self.operated_image
            image = fluu(not_changed_image)
            updateImage(image)

        def on_filter11():
            not_changed_image = self.operated_image
            image = kara_kalem(not_changed_image)
            updateImage(image)

        def on_filter12():
            not_changed_image = self.operated_image
            image = phosphorous(not_changed_image)
            updateImage(image)

        def on_filter13():
            not_changed_image = self.operated_image
            image = g_phosphorous(not_changed_image)
            updateImage(image)

        def on_filter14():
            not_changed_image = self.operated_image
            image = fire(not_changed_image)
            updateImage(image)

        def on_filter15():
            not_changed_image = self.operated_image
            image = monster(not_changed_image)
            updateImage(image)

        def on_filter16():
            not_changed_image = self.operated_image
            image = lemon_tree(not_changed_image)
            updateImage(image)

        def on_filter17():
            not_changed_image = self.operated_image
            image = bluish(not_changed_image)
            updateImage(image)

        def on_filter18():
            not_changed_image = self.operated_image
            image = inverseImage(not_changed_image)
            updateImage(image)

        def on_filter19():
            not_changed_image = self.operated_image
            image = oil_paint(not_changed_image)
            updateImage(image)

        def on_filter20():
            not_changed_image = self.operated_image
            image = changeContrast(not_changed_image,1,50)
            updateImage(image)


        ## Butonlara tıklandığında ki bağlantılar..
        self.btn_save.clicked.connect(saveImage)
        self.slider_lighter.valueChanged.connect( on_darker)  # İsimlendirme yanlış olmuş , Parlaklığı azaltan yer.
        self.slider_positive.valueChanged.connect(on_brighter)
        self.slider_decrease.valueChanged.connect(on_decrease)
        self.slider_increase.valueChanged.connect(on_increase)
        self.btn_clear.clicked.connect(on_clear)
        self.btn_inverse.clicked.connect(on_inverse)
        self.btn_contrast.clicked.connect(show_contrast)
        self.btn_brightness.clicked.connect(show_brightness)
        self.btn_rotate.clicked.connect(show_rotate)
        self.btn_flip_x.clicked.connect(on_flip_x)
        self.btn_flip_y.clicked.connect(on_flip_y)
        self.btn_flip_x_3.clicked.connect(on_flip_xy)
        self.btn_flip.clicked.connect(show_flips)
        self.btn_blur.clicked.connect(on_blur)
        self.btn_autoEnhancement.clicked.connect(on_autoenh)
        self.addImage.clicked.connect(on_adding_image)
        self.btn_crop.clicked.connect(show_crop)

        ## Filter button connections
        self.btn_filter1.clicked.connect(on_filter1)
        self.btn_filter2.clicked.connect(on_filter2)
        self.btn_filter3.clicked.connect(on_filter3)
        self.btn_filter4.clicked.connect(on_filter4)
        self.btn_flter5.clicked.connect(on_filter5)
        self.btn_filter6.clicked.connect(on_filter6)
        self.btn_filter7.clicked.connect(on_filter7)
        self.btn_filter8.clicked.connect(on_filter8)
        self.btn_filter9.clicked.connect(on_filter9)
        self.btn_filter10.clicked.connect(on_filter10)
        self.btn_filter11.clicked.connect(on_filter11)
        self.btn_filter12.clicked.connect(on_filter12)
        self.btn_filter13.clicked.connect(on_filter13)
        self.btn_filter14.clicked.connect(on_filter14)
        self.btn_filter15.clicked.connect(on_filter15)
        self.btn_filter16.clicked.connect(on_filter16)
        self.btn_filter17.clicked.connect(on_filter17)
        self.btn_filter18.clicked.connect(on_filter18)
        self.btn_filter19.clicked.connect(on_filter19)
        self.btn_filter20.clicked.connect(on_filter20)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MiniMiniEditor"))
        self.addImage.setToolTip(_translate("MainWindow", "Add Image"))
        self.addImage.setText(_translate("MainWindow", "..."))
        self.btn_crop.setToolTip(_translate("MainWindow", "Crop"))
        self.btn_crop.setText(_translate("MainWindow", "..."))
        self.btn_autoEnhancement.setToolTip(_translate("MainWindow", "Auto Enhancement"))
        self.btn_autoEnhancement.setText(_translate("MainWindow", "..."))
        self.btn_inverse.setToolTip(_translate("MainWindow", "Contrast"))
        self.btn_inverse.setText(_translate("MainWindow", "..."))
        self.btn_blur.setToolTip(_translate("MainWindow", "Blur"))
        self.btn_blur.setText(_translate("MainWindow", "..."))
        self.btn_flip.setToolTip(_translate("MainWindow", "Flip"))
        self.btn_flip.setText(_translate("MainWindow", "..."))
        self.btn_rotate.setToolTip(_translate("MainWindow", "Rotate"))
        self.btn_rotate.setText(_translate("MainWindow", "..."))
        self.btn_brightness.setToolTip(_translate("MainWindow", "Brightness"))
        self.btn_brightness.setText(_translate("MainWindow", "..."))
        self.btn_contrast.setToolTip(_translate("MainWindow", "Contrast"))
        self.btn_contrast.setText(_translate("MainWindow", "..."))
        self.btn_apply.setToolTip(_translate("MainWindow", "Apply"))
        self.btn_apply.setText(_translate("MainWindow", "..."))
        self.btn_clear.setToolTip(_translate("MainWindow", "Clear "))
        self.btn_clear.setText(_translate("MainWindow", "..."))
        self.btn_save.setToolTip(_translate("MainWindow", "Save"))
        self.btn_save.setText(_translate("MainWindow", "..."))
        self.lbl_image_name.setText(_translate("MainWindow", "Image Name"))
        self.label_darker.setText(_translate("MainWindow", "Darker"))
        self.label_lighter.setText(_translate("MainWindow", "Lighter"))
        self.btn_apply_rotation.setToolTip(_translate("MainWindow", "Apply"))
        self.btn_apply_rotation.setText(_translate("MainWindow", "..."))
        self.label_2.setText(_translate("MainWindow", "Rotate Angle"))
        self.btn_flip_y.setText(_translate("MainWindow", "Vertical"))
        self.btn_flip_x.setText(_translate("MainWindow", "Horizontal"))
        self.btn_flip_x_3.setText(_translate("MainWindow", "Both"))
        self.label_darker_2.setText(_translate("MainWindow", "Increase"))
        self.label_lighter_2.setText(_translate("MainWindow", "Decrease"))
        self.btn_filter1.setText(_translate("MainWindow", "BlackAndWhite"))
        self.btn_filter2.setText(_translate("MainWindow", "Sketch"))
        self.btn_filter3.setText(_translate("MainWindow", "Soft Sketch"))
        self.btn_filter4.setText(_translate("MainWindow", "Rose"))
        self.btn_flter5.setText(_translate("MainWindow", "Mysterious"))
        self.btn_filter6.setText(_translate("MainWindow", "Hard Mysterious"))
        self.btn_filter7.setText(_translate("MainWindow", "Door Hole"))
        self.btn_filter8.setText(_translate("MainWindow", "Orange Peel"))
        self.btn_filter9.setText(_translate("MainWindow", "Soft BW"))
        self.btn_filter10.setText(_translate("MainWindow", "Astigmatism"))
        self.btn_filter11.setText(_translate("MainWindow", "Kara Kalem"))
        self.btn_filter12.setText(_translate("MainWindow", "Smurf"))
        self.btn_filter13.setText(_translate("MainWindow", "Fire"))
        self.btn_filter14.setText(_translate("MainWindow", "Cold"))
        self.btn_filter15.setText(_translate("MainWindow", "Tomato"))
        self.btn_filter16.setText(_translate("MainWindow", "Lemon Tree"))
        self.btn_filter17.setText(_translate("MainWindow", "Gold"))
        self.btn_filter18.setText(_translate("MainWindow", "Inverse"))
        self.btn_filter19.setText(_translate("MainWindow", "Stone"))
        self.btn_filter20.setText(_translate("MainWindow", "Shiny"))
        self.label_4.setText(_translate("MainWindow", "Filters"))
        self.start_points.setTitle(_translate("MainWindow", "Start Coordinates"))
        self.label_8.setText(_translate("MainWindow", "Y :"))
        self.label_5.setText(_translate("MainWindow", "X :"))
        self.finish_points.setTitle(_translate("MainWindow", "Finish Coordinates"))
        self.label_9.setText(_translate("MainWindow", "Y :"))
        self.label_10.setText(_translate("MainWindow", "X :"))
        self.btn_apply_crop.setToolTip(_translate("MainWindow", "Apply"))
        self.btn_apply_crop.setText(_translate("MainWindow", "..."))
        self.groupBox.setTitle(_translate("MainWindow", "Image Size"))
        self.lbl_max_X.setText(_translate("MainWindow", "MAX X"))
        self.lbl_max_Y.setText(_translate("MainWindow", "MAX Y"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
